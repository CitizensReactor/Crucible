<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ValueConverter="clr-namespace:Crucible.ValueConverter"
                    xmlns:controls="http://schemas.microsoft.com/netfx/2007/xaml/presentation"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:local="clr-namespace:Crucible">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml"/>
        <ResourceDictionary Source="Scroll.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <ValueConverter:ValidDate x:Key="ValidDate"/>
    <ValueConverter:FilesystemTreeViewItemToIconConverter x:Key="FilesystemTreeViewItemToIconConverter" />
    <ValueConverter:DatabaseMenuItemToIconConverter x:Key="DatabaseMenuItemToIconConverter" />
    <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
    <ValueConverter:StringNullOrWhitespaceToVisibility x:Key="StringNullOrWhitespaceToVisibility" />
    <ValueConverter:StringNullOrWhitespaceToInvisibility x:Key="StringNullOrWhitespaceToInvisibility" />
    <ValueConverter:NullToFalse x:Key="NullToFalse" />
    <ValueConverter:GreaterThanZero x:Key="GreaterThanZero" />
    <ValueConverter:GreaterThanOrEqualZero x:Key="GreaterThanOrEqualZero" />
    <ValueConverter:AllTrue x:Key="AllTrue"/>
    <ValueConverter:AllFalse x:Key="AllFalse"/>
    <ValueConverter:AllFalseToVisibility x:Key="AllFalseToVisibility"/>
    <ValueConverter:ExpanderAllTrue x:Key="ExpanderAllTrue"/>
    <ValueConverter:AllTrueToVisibility x:Key="AllTrueToVisibility"/>
    <ValueConverter:IndexToEnabledConverter x:Key="IndexToEnabledConverter"/>
    <controls:BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>
    <ValueConverter:InvertBoolean x:Key="InvertBoolean"/>
    <ValueConverter:DatabaseArrayFieldBindingConverter x:Key="DatabaseArrayFieldBindingConverter"/>
    <ValueConverter:BooleanToInvisibility x:Key="BooleanToInvisibility"/>
    <ValueConverter:AnyTrue x:Key="AnyTrue"/>
    <ValueConverter:AnyTrueToVisibility x:Key="AnyTrueToVisibility"/>
    <ValueConverter:MaximizedToVisibility x:Key="MaximizedToVisibility"/>
    <ValueConverter:MaximizedToInvisibility x:Key="MaximizedToInvisibility"/>
    <ValueConverter:LowerCaseConverter x:Key="LowerCaseConverter"/>
    <ValueConverter:UtcToLocalDateTimeConverter x:Key="UtcToLocalDateTimeConverter"/>
    

    <Thickness x:Key="FieldEditor_Generic_Property_Padding" Left="5" Top="2" Right="0" Bottom="2"  />
    <Thickness x:Key="FieldEditor_Container_Property_Padding" Left="5" Top="2" Right="4" Bottom="2"  />

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource Editor_Accent_Color}"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{StaticResource Editor_Accent_Grey_Color}"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{StaticResource Editor_Accent_Grey_Color}"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{StaticResource Editor_Light_Foreground_Color}"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrush}" Color="{StaticResource Editor_Light_Foreground_Color}"/>

    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}" />
        <Setter Property="Foreground" Value="{StaticResource Editor_Medium_Foreground}" />
    </Style>

    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}" />
    </Style>
    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Background="{StaticResource Editor_Dark_Background}" BorderBrush="White" BorderThickness="0">
                        <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" Margin="5,4,5,4"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TabItemBase" TargetType="{x:Type TabItem}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Editor_Dark_Foreground}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}"/>
        <Setter Property="Foreground" Value="{StaticResource Editor_Dark_Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid Name="Panel" Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="{StaticResource Editor_Accent}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Panel" Property="Background" Value="{StaticResource Editor_Dark_Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource TabItemBase}"/>
    <Style TargetType="{x:Type local:FilesystemEntryTab}" BasedOn="{StaticResource TabItemBase}"/>

    <Style x:Key="FilesystemTreeViewItem"  TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="1500"/>
    </Style>

    <Style x:Key="FilesystemTreeView" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource FilesystemTreeViewItem}"/>
    </Style>

    <Style x:Key="ButtonBase" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Editor_Light_Foreground}"/>
                <Setter Property="Background" Value="{StaticResource Editor_Medium_Background}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource Editor_Medium_Foreground}"/>
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor_Medium_Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3,0,3,1"/>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBase}"/>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="19" Height="13" Background="Transparent">
                        <Border SnapsToDevicePixels="true" Width="9" Height="9"
                  BorderBrush="#FF7898B5" BorderThickness="1" CornerRadius="1">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                    <GradientStop Color="White" Offset=".2"/>
                                    <GradientStop Color="#FFC0B7A6" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Path x:Name="ExpandPath"
                  Margin="1,1,1,1"
                  Fill="Black"
                  Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath"
                    Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClosableTab" TargetType="{x:Type TabItem}"  BasedOn="{StaticResource TabItemBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <StackPanel Orientation="Horizontal" Name="Panel">
                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2,5,2"/>
                        <local:ClosableTabButton />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="{StaticResource Editor_Accent}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Panel" Property="Background" Value="{StaticResource Editor_Dark_Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="{StaticResource Editor_Medium_Background}"/>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{StaticResource ComboBoxNormalBorderBrush}" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource ComboBoxNormalBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ComboBoxNormalForegroundBrush}"/>

        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Type ComboBoxItem}}"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton
                            Background="{TemplateBinding Background}"
                            Foreground="{TemplateBinding Foreground}"
                            Name="ToggleButton"
                            Grid.Column="2"
                            ClickMode="Press"
                            Focusable="False"
                            IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                                    <ContentPresenter />
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                            <DockPanel HorizontalAlignment="Stretch" x:Name="InnerPanel">
                                <Path
                                    Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                                    Margin="0,0,10,0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    DockPanel.Dock="Right">
                                    <Path.Style>
                                        <Style TargetType="{x:Type Path}">
                                            <Setter Property="Fill" Value="{StaticResource Editor_Dark_Foreground}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                    <Setter Property="Fill" Value="{StaticResource Editor_Light_Foreground}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Path.Style>
                                </Path>
                            </DockPanel>
                        </ToggleButton>

                        <ContentPresenter 
                            Name="ContentSite"
                            Margin="5, 3, 23, 3"
                            IsHitTestVisible="False"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox 
                            Name="PART_EditableTextBox"
                            Margin="3, 3, 23, 3"
                            IsReadOnly="{TemplateBinding IsReadOnly}"
                            Visibility="Hidden"
                            Background="Transparent"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Focusable="True" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!-- Popup showing items -->
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            Focusable="False"
                            AllowsTransparency="True"
                            IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                            PopupAnimation="Slide">
                            <Grid Name="DropDown" 
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                  MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border 
                                    Name="DropDownBorder"
                                    Background="{StaticResource ComboBoxDropdownBackgroundBrush}"
                                    Margin="0, 1, 0, 0"
                                    CornerRadius="0"
                                    BorderThickness="1,1,1,1"
                                    BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"
                                    />
                                <ScrollViewer 
                                    Foreground="{StaticResource ComboBoxDropdownForegroundBrush}"
                                    Margin="4"
                                    SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}"/>
        <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor_Light_Background}"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border 
                                x:Name="Border"  
                                Width="17" 
                                Height="17" 
                                CornerRadius="0" 
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                                <Grid Margin="2">
                                    <Path
                                    Width="8.639906" Height="9.826521492247717" 
                                    x:Name="CheckMark"
                                    SnapsToDevicePixels="False" 
                                    Stroke="{TemplateBinding Foreground}"
                                    StrokeThickness="2"
                                    Data="F1 M 0.468732,4.66838L 3.03345,7.95443L 7.28127,0.420569" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter 
                            Margin="5,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True" Visibility="{TemplateBinding Content, Converter={StaticResource StringNullOrWhitespaceToInvisibility}}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Editor_Dark_Background}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Editor_Dark_Background}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Editor_Medium_Background}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Editor_Dark_Background}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Editor_Medium_Background}" />
                            <Setter Property="Foreground" Value="{StaticResource Editor_Medium_Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ClosableTabButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#20FFFFFF"/>
                <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Editor_Light_Foreground}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor_Medium_Background}"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Margin" Value="0,1,2,0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="{StaticResource Editor_Medium_Background}"/>
        <Setter Property="Foreground" Value="{StaticResource Editor_Medium_Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ClosableTabButton}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Canvas>
                            <TextBlock Text="✖" Foreground="{TemplateBinding Foreground}">
                                <TextBlock.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0.85" ScaleY="0.85"/>
                                    </TransformGroup>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </Canvas>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuItemBase" TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>

                            <!-- Content for the menu IGT -->
                            <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" BorderBrush="{StaticResource Editor_Medium_Background}" BorderThickness="1" Padding="0">
                                    <Grid Background="{StaticResource Editor_Dark_Background}" x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="5,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="LightGray" TargetName="Border"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="LightGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemBase}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Editor_Dark_Foreground}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{StaticResource Editor_Dark_Foreground}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"/>
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor_Dark_Background}"/>
    </Style>

    <Style x:Key="MenuItemRoot" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemBase}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Editor_Dark_Foreground}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>

    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Background="Transparent">
                        <Rectangle Height="1" Stroke="{StaticResource Editor_Medium_Background}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}"/>
    </Style>

    <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource {x:Type StatusBar}}">
        <Setter Property="Background" Value="{StaticResource Editor_Accent}"/>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="bg" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="bg" Value="{StaticResource Editor_Light_Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="bg" Value="{StaticResource Editor_Accent}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource Editor_Medium_Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type xctk:WatermarkTextBox}">
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource FieldEditor_Selected}"/>
            </Trigger>
        </Style.Triggers>
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
                    <Border x:Name="bg" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="bg" Value="{StaticResource Editor_Light_Background}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="bg" Value="{StaticResource FieldEditor_Selected}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource Editor_Dark_Background}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource Editor_Light_Foreground}"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource Editor_Medium_Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="WindowTopRightButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBase}">
        <Setter Property="Width" Value="21"/>
        <Setter Property="Height" Value="17"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Path
        x:Key="CloseButtonIcon"
        x:Shared="False"
        Stretch="Fill" 
        Margin="2" 
        Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Mode=TwoWay}"
        Data="F1 M 151,217L 152,217L 154.5,219.5L 157,217L 158,217L 158,218L 155.5,220.5L 158,223L 158,224L 157,224L 154.5,221.5L 152,224L 151,224L 151,223L 153.5,220.5L 151,218L 151,217 Z"/>
    <Path 
        x:Key="MinimizeButtonIcon"
        x:Shared="False"
        Stretch="Fill" 
        Margin="2,11,2,2" 
        Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Mode=TwoWay}"
        Data="M0,0 L8,0 8,1 8,2 0,2 0,1 z"/>

    <Path 
        x:Key="MaximizeButtonIcon"
        x:Shared="False"
        Stretch="Fill" 
        Margin="2" 
        Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Mode=TwoWay}"
        Data="F1 M 34,17L 43,17L 43,23L 34,23L 34,17 Z M 35,19L 35,22L 42,22L 42,19L 35,19 Z"/>

    <Style x:Key="CloseButton" TargetType="{x:Type Button}"  BasedOn="{StaticResource WindowTopRightButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#CC3F4F"/>
                <Setter Property="BorderBrush" Value="#CC3F4F"/>
                <Setter Property="Background" Value="#260B0E"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Content">
            <Setter.Value>
                <StaticResource ResourceKey="CloseButtonIcon"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MinimizeButton" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowTopRightButton}">
        <Setter Property="Content">
            <Setter.Value>
                <StaticResource ResourceKey="MinimizeButtonIcon"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaximizeButton" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowTopRightButton}">
        <Setter Property="Content">
            <Setter.Value>
                <StaticResource ResourceKey="MaximizeButtonIcon"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RestoreButton" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowTopRightButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Path 
                    Stretch="Fill" 
                    Margin="2" 
                    Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Mode=TwoWay}"
                    Data="M1,4.9996096 L1,7.000219 7,6.999219 7,5.001 2,5.001 2,4.9996096 z M3,2.0014141 L3,3.0000001 8,3.0000001 8,4.0000001 8,4.0008045 9,4.0008045 9,2.0014141 z M2,0 L10,0 10,0.0010234118 10,1.0000001 10,5.001 8,5.001 8,7.9990235 0,8.0000239 0,4.0000001 0,3.0009998 0,3.0000001 2,3.0000001 2,1.0000001 2,0.0010234118 z"/>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>